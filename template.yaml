---
AWSTemplateFormatVersion: 2010-09-09

Description: This template deploys an OpenVPN server in a public subnet of VPC
  its own VPC with internet access provided for by an internet gateway, with a
  default route on the public subnet.

Parameters:
  ProjectName:
    Description: An ProjectName name that is prefixed to all resource names
    Type: String
    Default: PrivateVPN

  Environment:
    Description: An evironment tag name
    Type: String
    Default: production

  CostAllocationTagKey:
    Description: The tag key used for cost allocation tags
    Type: String
    Default: Cost Center

  CostAllocationTagValue:
    Description: The tag value for the cost allocation
    Type: String
    Default: private-vpn

  VpcCIDR:
    Description: Please enter the CIDR range for this VPC
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetCIDR:
    Description: Please enter the CIDR range for the public subnet
    Type: String
    Default: 10.0.0.0/28

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: ProjectName
        Parameters:
          - ProjectName
      -
        Label:
          default: Tagging
        Parameters:
          - Environment
          - CostAllocationTagKey
          - CostAllocationTagValue
      -
        Label:
          default: VPC
        Parameters:
          - VpcCIDR
          - PublicSubnetCIDR

    ParameterLabels:
      ProjectName:
        default: ProjectName Name
      Environment:
        default: Environment (Prod/Dev/Etc.)
      CostAllocationTagKey:
        default: Cost Allocation Tag Key
      CostAllocationTagValue:
        default: Cost Allocation Tag Value
      VpcCIDR:
        default: VPC CIDR Block
      PublicSubnetCIDR:
        default: Public Subnet CIDR Block

  Outputs:
    VPC:
      Description: The ID of the VPC
      Value: !Ref VPC

    PublicSubnet:
      Description: A reference to the public subnet in AZ1
      Value: !Ref PublicSubnet

    OpenVPNSecurityGroup:
      Description: Security group applied to the OpenVPN server
      Value: !Ref OpenVPNSecurityGroup

    PublicSubnetNACL:
      Description: NACL applied to the public subnets
      Value: !Ref PublicSubnetNACL

Resources:

  ##############################################################################
  # VPC
  ##############################################################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Internet Gateway
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Public Subnet (AZ1)
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Public Routes
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  PublicSubnetNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Network ACL for Public Subnet (AZ1)
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  PublicSubnetNACLInbound1194UDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      CidrBlock: 0.0.0.0/0
      Egress: false
      PortRange:
        From: 1194
        To: 1194
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 100

  PublicSubnetNACLOutbound80TCP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 80
        To: 80
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 100

  PublicSubnetNACLOutbound443TCP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 443
        To: 443
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 200

  PublicSubnetNACLOutboundEphemeralTCP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 32768
        To: 65535
      Protocol: 6 # TCP
      RuleAction: allow
      RuleNumber: 300

  PublicSubnetNACLOutboundEphemeralUDP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref PublicSubnetNACL
      CidrBlock: 0.0.0.0/0
      Egress: true
      PortRange:
        From: 32768
        To: 65535
      Protocol: 17 # UDP
      RuleAction: allow
      RuleNumber: 400

  ##############################################################################
  # EC2 / ELB
  ##############################################################################

  VPNELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: vpn-elb-sg
      GroupDescription: Security group for the VPN ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
          Description: OpenVPN over UDP
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
          Description: All traffic
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Security Group for the VPN ELB
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  VPNEC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: vpn-ec2-sg
      GroupDescription: Security group for OpenVPN EC2 instances
      VpcId: !Ref VPC
      SecurityGroupIngress:
      # TODO: remove
        - IpProtocol: udp
          FromPort: 1194
          ToPort: 1194
          CidrIp: 0.0.0.0/0
          Description: OpenVPN over UDP
      # TODO: remove
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
          Description: SSH
#      SecurityGroupIngress:
#        - IpProtocol: udp
#          FromPort: 1194
#          ToPort: 1194
#          SourceSecurityGroupId: !Ref VPNELBSecurityGroup
#          Description: OpenVPN over UDP
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 65535
          SourceSecurityGroupId: !Ref VPNELBSecurityGroup
          Description: All traffic
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: All HTTPS traffic
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: All HTTP traffic
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} Security Group for OpenVPN EC2 instances
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      DesiredCapacity: 1
      MinSize: 1
      MaxSize: 2
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      TerminationPolicies:
        - OldestInstance
      LaunchTemplate:
        LaunchTemplateId: !Ref VPNEC2LaunchTemplate
        Version: !GetAtt VPNEC2LaunchTemplate.LatestVersionNumber
      TargetGroupARNs:
        - !Ref VPNELBTargetGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} AutoScaling Group
          PropagateAtLaunch: false
        - Key: Environment
          Value: !Ref Environment
          PropagateAtLaunch: false
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue
          PropagateAtLaunch: false

  VPNLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet
      Type: network
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} ELB
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  VPNELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 1194
      Protocol: UDP
      HealthCheckProtocol: TCP
      HealthCheckPort: 12321
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName} ELB Target Group for VPN Instances
        - Key: Environment
          Value: !Ref Environment
        - Key: !Ref CostAllocationTagKey
          Value: !Ref CostAllocationTagValue

  VPNLoadBalancer1194UDPListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref VPNELBTargetGroup
          Type: forward
      LoadBalancerArn: !Ref VPNLoadBalancer
      Port: 1194
      Protocol: UDP

  VPNEC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allow-modify-instance
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ec2:ModifyInstanceAttribute
                Resource: "*"

  VPNEC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref VPNEC2InstanceRole

  VPNEC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          default:
            - nat-forwarding
            - auto-patching
            - open-vpn-monitoring
        nat-forwarding:
          packages:
            yum:
              firewalld: []
          files:
            /tmp/configure-firewalld:
              content: !Sub |
                #!/bin/bash
                # Prune services, allow openvpn and assign eth0 to the external zone
                # which supports ip masquerading by default.
                firewall-cmd --permanent --zone=public --set-target=DROP # Also blocks pings
                firewall-cmd --permanent --zone=external --set-target=DROP
                firewall-cmd --permanent --zone=external --change-interface=eth0
                firewall-cmd --permanent --zone=external --add-service=openvpn
                firewall-cmd --permanent --zone=internal --remove-service=mdns
                firewall-cmd --permanent --zone=internal --remove-service=samba-client
                firewall-cmd --permanent --zone=internal --remove-service=dhcpv6-client
                firewall-cmd --permanent --zone=internal --add-source=10.8.0.0/22
                firewall-cmd --reload
              mode: "000744"
              owner: root
              group: root
            /etc/sysctl.conf:
              content: |
                net.ipv4.ip_forward=1
              mode: "000644"
              owner: root
              group: root
          commands:
            enable-ip-forwarding:
              command: /sbin/sysctl -w net.ipv4.ip_forward=1
            disable-source-dest-check:
              command: !Sub |
                aws ec2 modify-instance-attribute \
                  --instance-id $(ec2-metadata -i | awk '{print $2}') \
                  --no-source-dest-check \
                  --region ${AWS::Region}
          services:
            firewalld:
              enabled: "true"
              ensureRunning: "true"
              files:
                - /tmp/configure-firewalld
            commands:
              configure:
                command: /tmp/configure-firewalld
        open-vpn-monitoring:
          files:
            /usr/local/bin/open-vpn-monitor.py:
              content: |
                import SocketServer

                HOST = "localhost"
                PORT = 12321

                class EchoServer(SocketServer.ThreadingMixIn, SocketServer.TCPServer):
                    pass

                class EchoRequestHandler(SocketServer.StreamRequestHandler):
                    def handle(self):
                        print "connection from %s" % self.client_address[0]
                        while True:
                            line = self.rfile.readline()
                            if not line: break
                            print "%s wrote: %s" % (self.client_address[0], line.rstrip())
                            self.wfile.write(line)
                        print "%s disconnected" % self.client_address[0]

                server = EchoServer((HOST, PORT), EchoRequestHandler)

                print "server listening on %s:%s" % server.server_address
                server.serve_forever()
              mode: "000644"
              owner: root
              group: root
            /etc/systemd/system/open-vpn-monitor.service:
              content: !Sub |
                [Unit]
                Description=OpenVPN monitoring service
                After=openvpn@server.service
                StartLimitIntervalSec=0

                [Service]
                Type=simple
                Restart=always
                RestartSec=1
                User=nobody
                Group=nobody
                ExecStart=/usr/bin/env python /usr/local/bin/open-vpn-monitor.py

                [Install]
                WantedBy=multi-user.target
              mode: "000644"
              owner: root
              group: root
          services:
            open-vpn-monitor:
              enabled: "true"
              ensureRunning: "true"
              files:
                - /usr/local/bin/open-vpn-monitor.py
                - /etc/systemd/system/open-vpn-monitor.service
        auto-patching:
          files:
            /tmp/mycron:
              content: 0 0 * * * yum -y update --security
              mode: "000644"
              owner: root
              group: root
          commands:
            setup-autopatching:
              command: "crontab /tmp/mycron"
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Arn: !GetAtt VPNEC2InstanceProfile.Arn
        ImageId: ami-0c15454b14dbb5328 # WIP pre-configured OpenVPN instance. Replace with Amazon AMI.
        # ImageId: ami-00068cd7555f543d5 # Amazon Linux 2 AMI (HVM, 64-bit x86)
        InstanceInitiatedShutdownBehavior: terminate
        InstanceType: t2.micro
        # KeyName: # TODO
        SecurityGroupIds:
          - !Ref VPNEC2SecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${ProjectName} OpenVPN Instance
              - Key: Environment
                Value: !Ref Environment
              - Key: !Ref CostAllocationTagKey
                Value: !Ref CostAllocationTagValue
        UserData:
          'Fn::Base64': !Sub |
            #!/bin/bash -ex
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource VPNEC2LaunchTemplate --region ${AWS::Region}
